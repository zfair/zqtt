// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: zqtt.proto

package zqttpb

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MessageType int32

const (
	MsgNone MessageType = 0
	MsgText MessageType = 1
)

var MessageType_name = map[int32]string{
	0: "MsgNone",
	1: "MsgText",
}

var MessageType_value = map[string]int32{
	"MsgNone": 0,
	"MsgText": 1,
}

func (x MessageType) Enum() *MessageType {
	p := new(MessageType)
	*p = x
	return p
}

func (x MessageType) String() string {
	return proto.EnumName(MessageType_name, int32(x))
}

func (x *MessageType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(MessageType_value, data, "MessageType")
	if err != nil {
		return err
	}
	*x = MessageType(value)
	return nil
}

func (MessageType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_04e3734514daed4a, []int{0}
}

type Message struct {
	MessageSeq           int64       `protobuf:"varint,1,opt,name=messageSeq" json:"messageSeq"`
	Username             string      `protobuf:"bytes,2,opt,name=username" json:"username"`
	ClientID             string      `protobuf:"bytes,3,opt,name=clientID" json:"clientID"`
	TopicName            string      `protobuf:"bytes,4,opt,name=topicName" json:"topicName"`
	Ssid                 []uint64    `protobuf:"varint,5,rep,name=ssid" json:"ssid,omitempty"`
	Qos                  int32       `protobuf:"varint,6,opt,name=qos" json:"qos"`
	Type                 MessageType `protobuf:"varint,7,opt,name=type,enum=zqttpb.MessageType" json:"type"`
	Payload              []byte      `protobuf:"bytes,8,opt,name=payload" json:"payload"`
	CreatedAt            int64       `protobuf:"varint,9,opt,name=createdAt" json:"createdAt"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_04e3734514daed4a, []int{0}
}
func (m *Message) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Message.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(m, src)
}
func (m *Message) XXX_Size() int {
	return m.Size()
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("zqttpb.MessageType", MessageType_name, MessageType_value)
	proto.RegisterType((*Message)(nil), "zqttpb.Message")
}

func init() { proto.RegisterFile("zqtt.proto", fileDescriptor_04e3734514daed4a) }

var fileDescriptor_04e3734514daed4a = []byte{
	// 290 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x90, 0xd1, 0x4a, 0xc3, 0x30,
	0x14, 0x86, 0x9b, 0xb5, 0x5b, 0xb7, 0x33, 0x91, 0x11, 0x87, 0x04, 0x2f, 0x62, 0x18, 0x82, 0x41,
	0x70, 0x82, 0x6f, 0xe0, 0xf0, 0xc6, 0x8b, 0xed, 0x42, 0xf7, 0x02, 0x75, 0x3b, 0x94, 0xc1, 0xb6,
	0x64, 0x4d, 0x04, 0xeb, 0xb3, 0xf9, 0x00, 0xbd, 0xdc, 0x13, 0x88, 0xeb, 0x93, 0x48, 0xd6, 0xd4,
	0xf5, 0xee, 0xef, 0xf7, 0x7f, 0xfc, 0xf4, 0x04, 0xe0, 0x6b, 0x67, 0xed, 0x58, 0x67, 0xca, 0x2a,
	0xda, 0x71, 0x59, 0xbf, 0x5f, 0x0d, 0x53, 0x95, 0xaa, 0x23, 0x7a, 0x70, 0xa9, 0x6a, 0x47, 0xdf,
	0x2d, 0x88, 0xa7, 0x68, 0x4c, 0x92, 0x22, 0xbd, 0x01, 0xd8, 0x54, 0xf1, 0x0d, 0x77, 0x8c, 0x08,
	0x22, 0xc3, 0x49, 0x54, 0xfc, 0x5c, 0x07, 0xaf, 0x0d, 0x4e, 0x05, 0x74, 0x3f, 0x0c, 0x66, 0xdb,
	0x64, 0x83, 0xac, 0x25, 0x88, 0xec, 0x79, 0xe7, 0x9f, 0x3a, 0x63, 0xb1, 0x5e, 0xe1, 0xd6, 0xbe,
	0x3c, 0xb3, 0xb0, 0x69, 0xd4, 0x94, 0x8e, 0xa0, 0x67, 0x95, 0x5e, 0x2d, 0x66, 0x6e, 0x24, 0x6a,
	0x28, 0x27, 0x4c, 0x19, 0x44, 0xc6, 0xac, 0x96, 0xac, 0x2d, 0x42, 0x19, 0xf9, 0xfa, 0x48, 0xe8,
	0x25, 0x84, 0x3b, 0x65, 0x58, 0x47, 0x10, 0xd9, 0xf6, 0x85, 0x03, 0xf4, 0x1e, 0x22, 0x9b, 0x6b,
	0x64, 0xb1, 0x20, 0xf2, 0xfc, 0xf1, 0x62, 0x5c, 0x1d, 0x3e, 0xf6, 0xe7, 0xcd, 0x73, 0x8d, 0xf5,
	0x8c, 0xd3, 0x28, 0x87, 0x58, 0x27, 0xf9, 0x5a, 0x25, 0x4b, 0xd6, 0x15, 0x44, 0x9e, 0xf9, 0xb2,
	0x86, 0xee, 0x27, 0x17, 0x19, 0x26, 0x16, 0x97, 0x4f, 0x96, 0xf5, 0x1a, 0xaf, 0x71, 0xc2, 0x77,
	0xb7, 0xd0, 0x6f, 0xcc, 0xd3, 0x3e, 0xc4, 0x53, 0x93, 0xce, 0xd4, 0x16, 0x07, 0x81, 0xff, 0x98,
	0xe3, 0xa7, 0x1d, 0x90, 0xc9, 0xb0, 0x38, 0xf0, 0x60, 0x7f, 0xe0, 0x41, 0x51, 0x72, 0xb2, 0x2f,
	0x39, 0xf9, 0x2d, 0x39, 0xf9, 0x0b, 0x00, 0x00, 0xff, 0xff, 0x9e, 0xba, 0x9f, 0x56, 0xa8, 0x01,
	0x00, 0x00,
}

func (m *Message) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Message) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	i = encodeVarintZqtt(dAtA, i, uint64(m.CreatedAt))
	i--
	dAtA[i] = 0x48
	if m.Payload != nil {
		i -= len(m.Payload)
		copy(dAtA[i:], m.Payload)
		i = encodeVarintZqtt(dAtA, i, uint64(len(m.Payload)))
		i--
		dAtA[i] = 0x42
	}
	i = encodeVarintZqtt(dAtA, i, uint64(m.Type))
	i--
	dAtA[i] = 0x38
	i = encodeVarintZqtt(dAtA, i, uint64(m.Qos))
	i--
	dAtA[i] = 0x30
	if len(m.Ssid) > 0 {
		for iNdEx := len(m.Ssid) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintZqtt(dAtA, i, uint64(m.Ssid[iNdEx]))
			i--
			dAtA[i] = 0x28
		}
	}
	i -= len(m.TopicName)
	copy(dAtA[i:], m.TopicName)
	i = encodeVarintZqtt(dAtA, i, uint64(len(m.TopicName)))
	i--
	dAtA[i] = 0x22
	i -= len(m.ClientID)
	copy(dAtA[i:], m.ClientID)
	i = encodeVarintZqtt(dAtA, i, uint64(len(m.ClientID)))
	i--
	dAtA[i] = 0x1a
	i -= len(m.Username)
	copy(dAtA[i:], m.Username)
	i = encodeVarintZqtt(dAtA, i, uint64(len(m.Username)))
	i--
	dAtA[i] = 0x12
	i = encodeVarintZqtt(dAtA, i, uint64(m.MessageSeq))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func encodeVarintZqtt(dAtA []byte, offset int, v uint64) int {
	offset -= sovZqtt(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Message) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovZqtt(uint64(m.MessageSeq))
	l = len(m.Username)
	n += 1 + l + sovZqtt(uint64(l))
	l = len(m.ClientID)
	n += 1 + l + sovZqtt(uint64(l))
	l = len(m.TopicName)
	n += 1 + l + sovZqtt(uint64(l))
	if len(m.Ssid) > 0 {
		for _, e := range m.Ssid {
			n += 1 + sovZqtt(uint64(e))
		}
	}
	n += 1 + sovZqtt(uint64(m.Qos))
	n += 1 + sovZqtt(uint64(m.Type))
	if m.Payload != nil {
		l = len(m.Payload)
		n += 1 + l + sovZqtt(uint64(l))
	}
	n += 1 + sovZqtt(uint64(m.CreatedAt))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovZqtt(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozZqtt(x uint64) (n int) {
	return sovZqtt(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Message) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZqtt
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Message: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Message: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageSeq", wireType)
			}
			m.MessageSeq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZqtt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageSeq |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZqtt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthZqtt
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthZqtt
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZqtt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthZqtt
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthZqtt
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZqtt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthZqtt
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthZqtt
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TopicName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowZqtt
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Ssid = append(m.Ssid, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowZqtt
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthZqtt
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthZqtt
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Ssid) == 0 {
					m.Ssid = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowZqtt
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Ssid = append(m.Ssid, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Ssid", wireType)
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Qos", wireType)
			}
			m.Qos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZqtt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Qos |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZqtt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= MessageType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZqtt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZqtt
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZqtt
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZqtt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipZqtt(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZqtt
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZqtt
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipZqtt(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowZqtt
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowZqtt
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowZqtt
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthZqtt
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupZqtt
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthZqtt
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthZqtt        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowZqtt          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupZqtt = fmt.Errorf("proto: unexpected end of group")
)
